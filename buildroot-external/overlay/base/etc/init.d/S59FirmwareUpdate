#!/bin/sh
#
# Perform coprocessor updates
#

start() {

  source /var/hm_mode 2>/dev/null

  echo -n "Starting RF-Module Update: "

  if [[ -n "${UART_GPIO}" ]]; then
    echo out >/sys/class/gpio/gpio${UART_GPIO}/direction
    sleep 1
    echo 1 >/sys/class/gpio/gpio${UART_GPIO}/value
    sleep 1
    echo 0 >/sys/class/gpio/gpio${UART_GPIO}/value
    sleep 1
    echo 1 >/sys/class/gpio/gpio${UART_GPIO}/value
  fi

  if [[ ! -e /etc/config/no-coprocessor-update ]]; then
    FOUND=0
    # check if user has a HM-MOD-RPI-PCB installed (GPIO)
    if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] || [[ "${HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then

      echo -n "HM-MOD-RPI-PCB: "

      FW_DIRECTORY=/firmware/HM-MOD-UART

      # identify which firmware file to take for a potential coprocessor
      # firmware update
      if [[ "${HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then
        # for HmIP support we flash the dualcopro firmware
        if [[ ! -e /etc/config/enable-debug-coprocessor ]]; then
          FW_FILE=dualcopro_si1002_update_blhm.eq3
        else
          NEW_VERSION=2.2.1
          FW_FILE=dualcopro_si1002_update_blhm-2.2.1.eq3
        fi
      else
        # for HmRF only we have to flash the old coprocessor firmware
        FW_FILE=coprocessor_update.eq3
      fi

      # identify the copro firmware version to be flashed
      if [[ -z "${NEW_VERSION}" ]]; then
        NEW_VERSION=$(cat ${FW_DIRECTORY}/fwmap | grep "${FW_FILE}" | awk '{ print $3 }')
      fi

      # if NEW_VERSION is not empty we go ahead and perform the
      # update operation
      OLD_VERSION=$(cat /var/rf_firmware_version 2>/dev/null)
      if [[ -n "${NEW_VERSION}" ]] && [[ "${NEW_VERSION}" != "${OLD_VERSION}" ]]; then
        # we always perform the firmware update in /tmp
        # so lets copy the whole firmware directory to tmp
        TMPDIR_FW=$(mktemp -d)
        cp -a ${FW_DIRECTORY}/${FW_FILE} ${TMPDIR_FW}

        # create artifical fwmap file
        echo "CCU2 ${FW_FILE} ${NEW_VERSION}" >${TMPDIR_FW}/fwmap

        if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] && [[ -n "${HMRF_DEVNODE}" ]]; then
          RPI_PCB_DEVNODE=${HMRF_DEVNODE}
        elif [[ "${HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] && [[ -n "${HMIP_DEVNODE}" ]]; then
          RPI_PCB_DEVNODE=${HMIP_DEVNODE}
        fi

        echo -n "${OLD_VERSION}=>${NEW_VERSION}, "

        # perform the coprocessor update
        /bin/eq3configcmd update-coprocessor -p ${RPI_PCB_DEVNODE} -t HM-MOD-UART -u -d ${TMPDIR_FW}
        if [[ $? -ne 0 ]]; then
          echo -n "forcing, "
          /bin/eq3configcmd update-coprocessor -p ${RPI_PCB_DEVNODE} -t HM-MOD-UART -u -f -d ${TMPDIR_FW}
        fi
        RF_VERSION=$(/bin/eq3configcmd update-coprocessor -p ${RPI_PCB_DEVNODE} -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5)
        echo "${RF_VERSION}" >/var/rf_firmware_version

        if [[ "${NEW_VERSION}" == "${RF_VERSION}" ]]; then
          echo -n "OK"
        else
          echo -n "ERROR (${RF_VERSION} != ${NEW_VERSION})"
        fi

        # remove the temporary directory again
        rm -rf ${TMPDIR_FW}
      else
        echo -n "${OLD_VERSION}, OK"
      fi
      FOUND=1
    fi

    # check if user has a HMIP-RFUSB installed (USB)
    if [[ "${HMIP_DEV}" == "HMIP-RFUSB" ]]; then
      if [[ ${FOUND} -eq 1 ]]; then
        echo -n "; "
      fi
      echo -n "HMIP-RFUSB: "

      NEW_VERSION=$(ls /firmware/HmIP-RFUSB/hmip_coprocessor_update-*.eq3 | sed 's/.*hmip_coprocessor_update-\(.*\)\.eq3/\1/')
      OLD_VERSION=$(/opt/java/bin/java -jar /opt/HmIP/hmip-copro-update.jar -p ${HMIP_DEVNODE} -v 2>/dev/null | grep "Application version =" | cut -d' ' -f5)
      if [[ "${NEW_VERSION}" != "${OLD_VERSION}" ]]; then
        echo -n "${OLD_VERSION}=>${NEW_VERSION}, "

        # run firmware update
        RF_VERSION=$(/opt/java/bin/java -jar /opt/HmIP/hmip-copro-update.jar -p ${HMIP_DEVNODE} -o -f /firmware/HmIP-RFUSB/hmip_coprocessor_update-*.eq3 2>/dev/null | grep "Version:" | cut -d' ' -f5)

        echo "${RF_VERSION}" >/var/rfusb_firmware_version

        if [[ "${NEW_VERSION}" == "${RF_VERSION}" ]]; then
          echo -n "OK"
        else
          echo -n "ERROR (${RF_VERSION} != ${NEW_VERSION})"
        fi
      else
        echo -n "${OLD_VERSION}, OK"
      fi

      FOUND=1
    fi

    if [[ ${FOUND} -eq 0 ]]; then
      echo "no GPIO/USB connected RF-hardware found"
    else
      # final echo
      echo
    fi
  else
    echo "disabled"
  fi
}

case "$1" in
  start)
    start
  ;;
  stop)
  ;;
  *)
  echo "Usage: $0 {start}"
  exit 1
esac

exit $?
