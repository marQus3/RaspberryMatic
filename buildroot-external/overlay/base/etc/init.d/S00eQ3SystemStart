#!/bin/sh
#
# set System Start Led Signal
#

CFG_TEMPLATE_DIR=/etc/config_templates

# function to identify the host system used
identify_host() {

  # default/fallback values
  HOST=""
  HM_MODE="NORMAL"
  HMRF_DEV="HM-MOD-RPI-PCB"
  HMRF_DEVNODE=""
  HMIP_DEV="HM-MOD-RPI-PCB"
  HMIP_DEVNODE=""
  UART_BASE=""
  UART_IRQ=""
  UART_DEV=""
  UART_GPIO=""

  # identify the RaspberryPi version used
  # http://elinux.org/RPi_HardwareHistory
  # https://github.com/MilhouseVH/bcmstat/blob/master/bcmstat.sh#L67
  hostid=$(cat /proc/cpuinfo | grep 'Revision' | awk '{print $3}')
  case ${hostid} in
    *a02080|*a02082|*a22082|*a32082)                 HOST="rpi3"       ;; # Raspberry Pi 3 Model B
    *a020a0)                                         HOST="rpi3cm"     ;; # Raspberry Pi Compute Module 3
    *a01040|*a01041|*a02041|*a02042|*a21041|*a22042) HOST="rpi2"       ;; # Raspberry Pi 2 Model B
    *9000c?)                                         HOST="rpi0w"      ;; # Raspberry Pi Zero W
    *90009?|*920093)                                 HOST="rpi0"       ;; # Raspberry Pi Zero
    *0011|*0014)                                     HOST="rpi1cm"     ;; # Raspberry Pi Compute Module 1
    *0010|*0013|*900032|*90003f)                     HOST="rpi1bp"     ;; # Raspberry Pi B+/512MB
    *0015|*900021|*900012)                           HOST="rpi1ap512"  ;; # Raspberry Pi A+/512MB
    *0012)                                           HOST="rpi1ap256"  ;; # Raspberry Pi A+/256MB
    *000d|*000e|*000f)                               HOST="rpi1b512"   ;; # Raspberry Pi B/512MB
    *0002|*0003|*0004|*0005|*0006)                   HOST="rpi1b256"   ;; # Raspberry Pi B/256MB
    *0007|*0008|*0009)                               HOST="rpi1a"      ;; # Raspberry Pi A/256MB

    # No RaspberryPi identified, try other boards
    *)
      hardware=$(cat /proc/cpuinfo | grep 'Hardware' | awk '{print $3}')
      case ${hardware} in
        Rockchip)                    HOST="tinkerboard";; # ASUS Tinkerboard
      esac
    ;;
  esac

  # if HOST is still empty we fall back to RaspberryPi3
  if [[ -z "${HOST}" ]]; then
    HOST="rpi3"
    echo "couldn't identify hardware platform (${hostid}). Using RaspberryPi3 as fallback"
  fi

  # depending on the host hardware we choose a different
  # uart base address and irq
  case ${HOST} in

    # RaspberryPi3 / RaspberryPi2
    rpi3*|rpi2*)
      if [[ -z "${UART_BASE}" ]]; then
        UART_BASE="0x3f201000"
      fi
      if [[ -z "${UART_IRQ}" ]]; then
        UART_IRQ="87"
      fi
      if [[ -z "${UART_DEV}" ]]; then
        UART_DEV="/dev/ttyAMA0"
      fi
      if [[ -z "${UART_GPIO}" ]]; then
        UART_GPIO=18
      fi
    ;;

    # RaspberryPi 1 and Zero (W)
    rpi1*|rpi0*)
      if [[ -z "${UART_BASE}" ]]; then
        UART_BASE="0x20201000"
      fi
      if [[ -z "${UART_IRQ}" ]]; then
        UART_IRQ="81"
      fi
      if [[ -z "${UART_DEV}" ]]; then
        UART_DEV="/dev/ttyAMA0"
      fi
      if [[ -z "${UART_GPIO}" ]]; then
        UART_GPIO=18
      fi
    ;;

    # ASUS Tinkerboard
    tinkerboard)
      if [[ -z "${UART_DEV}" ]]; then
        UART_DEV="/dev/ttyS1"
      fi
      if [[ -z "${UART_GPIO}" ]]; then
        UART_GPIO=184 # Tinkerboard requires gpio 184 for reset
      fi

      # disable HMIP (not supported yet)
      HMIP_DEV=""
      HMIP_DEVNODE=""
    ;;

    *)
      echo "ERROR: couldn't identify host hardware: ${hostid}"
    ;;

  esac

  # check if a HmIP-RFUSB (1b1f:c020) USB stick is connected
  # and set HMIP_DEV and HMIP_DEVNODE accordingly
  if lsusb | grep -q 1b1f:c020; then
    modprobe cp210x
    echo 1b1f c020 >/sys/bus/usb-serial/drivers/cp210x/new_id
    for i in $(find /sys/bus/usb/devices/usb*/ -name "ttyUSB*" -maxdepth 4); do
      DEVDIR=$(dirname $i)
      if [[ -f "${DEVDIR}/uevent" ]]; then
        if grep -q PRODUCT=1b1f/c020 ${DEVDIR}/uevent; then
          HMIP_DEV="HMIP-RFUSB"
          HMIP_DEVNODE=/dev/$(basename $i)
          break
        fi
      fi
    done
  fi

  # check if a HM-CFG-USB-2 (1b1f:c00f) USB stick is connected
  # and HMRF_DEV accordingly
  if lsusb | grep -q 1b1f:c00f; then
    HMRF_DEV="HM-CFG-USB-2"
  fi
}

# function to check if a factory reset (clearing whole /usr/local) should be performed
# in addition we also resize /usr/local in case it hasn't been resized to SD card
# boundaries
checkFactoryReset() {

  # only continue if .doFactoryReset file exists
  if [[ ! -r /usr/local/.doFactoryReset ]]; then
    return
  fi

  # extract partition number and device name
  DEVNODE=$(mountpoint -d /usr/local)
  DEVNAME=$(mountpoint -n /usr/local | cut -d' ' -f1)
  PARTNUM=$(echo ${DEVNODE} | cut -d':' -f2)
  DEV="/dev/$(readlink /sys/dev/block/${DEVNODE} | awk -F/ '{print $(NF-1)}')"

  # find out maximum SD card size (in cylinders)
  START_CHS=$(parted -s ${DEV} unit chs print | grep "^ ${PARTNUM} " | awk '{print $2}')
  END_CHS=$(parted -s ${DEV} unit chs print | grep "^ ${PARTNUM} " | awk '{print $3}')
  MAX_CHS=$(parted -s ${DEV} unit chs print | grep "Disk ${DEV}" | cut -d' ' -f3)

  # umount /usr/local to regenerate it
  umount -f /usr/local

  # only resize the partition if END_CHS != MAX_CHS
  if [[ -n "${START_CHS}" && -n "${END_CHS}" && -n "${MAX_CHS}" && "${END_CHS}" != "${MAX_CHS}" ]]; then
    # remove the third partition (/usr/local) and recreate it with
    # MAX_CHS
    parted -s ${DEV} rm ${PARTNUM}
    parted -s ${DEV} mkpart primary ${START_CHS} ${MAX_CHS}

    # we have to find out the new disk identifier after having modified
    # the partition table because this modifies the identifier
    disk_identifier=$(dd if=${DEV} bs=1 count=4 conv=notrunc skip=$((0x1B8)) 2>/dev/null | hexdump -e '"%08x"')
    if [[ -n "${disk_identifier}" && -f /boot/cmdline.txt ]]; then
      mount -o rw,remount /boot
      ROOTPARTNUM=$(mountpoint -d / | cut -d':' -f2)
      sed -i "s/ root=[^[:space:]]*/ root=PARTUUID=${disk_identifier}-$(printf '%02d' ${ROOTPARTNUM})/" /boot/cmdline.txt
      mount -o ro,remount /boot
    fi
  fi

  # we create a clean ext4 partition now
  mkfs.ext4 -F ${DEVNAME} -L userfs

  # mount /usr/local again
  mount /usr/local
}

# function to check if a backup should be restored that had been placed in /usr/local/tmp
# in addition to /usr/local/.doBackupRestore being present and empty
checkBackupRestore() {

  # only continue if .doBackupRestore file exists
  if [[ ! -r /usr/local/.doBackupRestore ]]; then
    return
  fi

  if [[ -f /usr/local/tmp/usr_local.tar.gz ]]; then
    # now remove the whole /usr/local, but keep /usr/local/tmp
    find /usr/local -not -name tmp -not -name "lost+found" -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

    # unarchive the backup archive to restore everything
    tar -C / --warning=no-timestamp --no-same-owner -xf /usr/local/tmp/usr_local.tar.gz

    # make sure everything is written to disk
    sync
  fi

  rm -f /usr/local/.doBackupRestore
}

# initialize a potentially existing RTC clock
init_rtc_device() {

  # only continue if we don't have a valid rtc yet
  [[ -e /dev/rtc0 ]] && return 0

  # load the common i2c kernel modules
  modprobe i2c_bcm2835
  modprobe i2c_dev

  # check for MCP7940N RTC clock at 0x6f (PiFace Shim RTC)
  i2cget -y 1 0x6f 0x00 2>/dev/null >/dev/null
  if [[ $? -eq 0 ]]; then
    # calibrate MCP7940N
    i2cset -y 1 0x6f 0x08 0x47 2>/dev/null >/dev/null
    if [[ $? -eq 0 ]]; then
      modprobe i2c:mcp7941x
      echo mcp7941x 0x6f >/sys/class/i2c-dev/i2c-1/device/new_device
      [[ -e /dev/rtc0 ]] && return 0
      echo 0x6f >/sys/class/i2c-dev/i2c-1/device/delete_device
    fi
  fi

  # check for DS3231/DS1307 RTC clock at 0x68
  i2cget -y 1 0x68 0x00 2>/dev/null >/dev/null
  if [[ $? -eq 0 ]]; then
    # check for DS3231
    modprobe i2c:ds3231
    [[ -e /dev/rtc0 ]] && return 0
    echo ds3231 0x68 >/sys/class/i2c-adapter/i2c-1/new_device
    [[ -e /dev/rtc0 ]] && return 0
    echo 0x68 >/sys/class/i2c-dev/i2c-1/device/delete_device

    # check for DS1307
    modprobe i2c:ds1307
    [[ -e /dev/rtc0 ]] && return 0
    echo ds1307 0x68 >/sys/class/i2c-adapter/i2c-1/new_device
    [[ -e /dev/rtc0 ]] && return 0
    echo 0x68 >/sys/class/i2c-dev/i2c-1/device/delete_device
  fi

  return 1
}

# we have to initialize /dev/urandom way earlier than the system usually
# does via S20urandom.
init_urandom() {
  if [[ ! -c /dev/urandom ]]; then
    return
  fi

  if [[ -s /etc/config/random-seed ]]; then
    cat /etc/config/random-seed >/dev/urandom
  else
    # initialize urandom with /proc/timer_list
    head -3 /proc/timer_list | tail -1 | cut -d' ' -f3 >/dev/urandom
  fi
}

# we save the random-seed pool so that we can immediately reuse it
# after a reboot
save_urandom() {
  if [[ ! -c /dev/urandom ]]; then
    return
  fi

  dd if=/dev/urandom of=/etc/config/random-seed count=1 bs=512 2>/dev/null
}

# function to update the crontab file and
# make sure that it is up to date
update_crontab() {
  NUM_TEMPLATE=$(wc -l $CFG_TEMPLATE_DIR/crontab.root | cut -d' ' -f1)
  NUM_USR=$(grep -Ff $CFG_TEMPLATE_DIR/crontab.root /usr/local/crontabs/root 2>/dev/null | wc -l | cut -d' ' -f1)

  # if NUM_USR is not equal to NUM_TEMPLATE we have to
  # update the usr crontab file
  if [[ ${NUM_USR} -ne ${NUM_TEMPLATE} ]]; then
    # add the standard commands from our template
    cat $CFG_TEMPLATE_DIR/crontab.root >/tmp/crontab.root

    # put all lines not matching setHWClock and SetInterfaceClock
    # to the temporary crontab.root file
    grep -viE "/bin/setHWClock.sh|/bin/SetInterfaceClock|/usr/sbin/logrotate" /usr/local/crontabs/root 2>/dev/null >>/tmp/crontab.root

    # make the temp crontab the new usr crontab
    mv /tmp/crontab.root /usr/local/crontabs/root
  fi
}

init() {

  # identify the host
  identify_host

  # init a potentially existing rtc clock
  init_rtc_device
  if [[ -e /dev/rtc0 ]]; then
    hwclock --hctosys --utc
  fi

  # init /dev/urandom
  init_urandom

  # load watchdog kernel module
  if [[ "${HOST}" != "tinkerboard" ]]; then
    modprobe bcm2835_wdt nowayout=1 heartbeat=15
  fi

  # load tunneling interface support
  modprobe tun

  # if /dev/ttyS0 is present move it to ttyS1 for
  # potentiall later use (e.g. bluetooth)
  if [[ "${HOST}" != "tinkerboard" ]]; then
    if [[ -c /dev/ttyS0 ]]; then
      mv /dev/ttyS0 /dev/ttyS1
    fi
  fi

  # check if a factory reset should be performed
  checkFactoryReset

  # check if we should restore a backup now
  checkBackupRestore

  # check if we should boot in LAN gateway mode
  if [[ -e /usr/local/HMLGW ]]; then
    HM_MODE="HM-LGW"
    if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
      HMRF_DEVNODE=${UART_DEV}
    fi
    HMIP_DEV=""
    HMIP_DEVNODE=""
  fi

  # depending on the HomeMatic mode (HmRF, HmIP) we
  # have to load different kernel modules.
  if [[ "${HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] && [[ "${HOST}" != "tinkerboard" ]]; then
    # HM/HmIP Dual Protocol
    modprobe bcm2835_raw_uart uart0_base=${UART_BASE} uart0_irq=${UART_IRQ}
    modprobe eq3_char_loop

    HMIP_DEVNODE="/dev/bcm2835-raw-uart"
    if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
      HMRF_DEVNODE="${HMIP_DEVNODE}"
    fi
  else
    if [[ "${HOST}" != "tinkerboard" ]]; then
      # use standard PL011 UART
      modprobe amba-pl011
    fi

    if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
      HMRF_DEVNODE=${UART_DEV}
    fi
  fi

  # make sure to save the urandom pool for future reboots
  save_urandom

  if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] && [[ -n "${HMRF_DEVNODE}" ]]; then
    RPI_PCB_DEVNODE=${HMRF_DEVNODE}
  elif [[ "${HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] && [[ -n "${HMIP_DEVNODE}" ]]; then
    RPI_PCB_DEVNODE=${HMIP_DEVNODE}
  fi

  if [[ -n "${RPI_PCB_DEVNODE}" ]]; then
    RF_SERIAL=$(/bin/eq3configcmd update-coprocessor -p ${RPI_PCB_DEVNODE} -t HM-MOD-UART -c -se 2>&1 | grep "SerialNumber:" | cut -d' ' -f5 | tr -d '[:space:]')
    if [[ -n "${RF_SERIAL}" ]]; then
      RF_VERSION=$(/bin/eq3configcmd update-coprocessor -p ${RPI_PCB_DEVNODE} -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5 | tr -d '[:space:]')
      RF_ADDRESS=$(/bin/eq3configcmd read-default-rf-address -f ${RPI_PCB_DEVNODE} -h 2>&1 | grep "^0x" | tr -d '[:space:]')
    fi
  fi

  if [[ -z "${RF_SERIAL}" ]]; then
    # no HM-MOD-RPI-PCB found
    if [[ "${HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
      HMRF_DEV=""
      HMRF_DEVNODE=""
    fi
    if [[ "${HMIP_DEV}" == "HM-MOD-RPI-PCB" ]]; then
      HMIP_DEV=""
      HMIP_DEVNODE=""
    fi
    UART_GPIO=""
  fi

  # save all info about the HM-MOD-RPI-PCB
  echo "${RF_SERIAL}" >/var/board_serial
  echo "${RF_VERSION}" >/var/rf_firmware_version
  echo "${RF_ADDRESS}" >/var/rf_address

  # save all mode information
  echo "HOST=${HOST}" >/var/hm_mode
  echo "HM_MODE=${HM_MODE}" >>/var/hm_mode
  echo "HMRF_DEV=${HMRF_DEV}" >>/var/hm_mode
  echo "HMRF_DEVNODE=${HMRF_DEVNODE}" >>/var/hm_mode
  echo "HMIP_DEV=${HMIP_DEV}" >>/var/hm_mode
  echo "HMIP_DEVNODE=${HMIP_DEVNODE}" >>/var/hm_mode
  echo "UART_GPIO=${UART_GPIO}" >>/var/hm_mode

        # cal local init startup file
        if [ ! -e /etc/config/safemode ] ; then
        	if [ -x /usr/local/etc/rc.init ]; then
                	/usr/local/etc/rc.init
        	fi
	fi

  # setup GPIO if HM-MOD-RPI-PCB is used
  if [[ -n "${UART_GPIO}" ]]; then
    echo ${UART_GPIO} >/sys/class/gpio/export
    sleep 1
    echo out >/sys/class/gpio/gpio${UART_GPIO}/direction
  fi
        chmod 775 /var
        mkdir /var/log
        chmod 775 /var/log
        mkdir /var/tmp
        chmod 775 /var/tmp
        mkdir /var/rega
        chmod 775 /var/rega
        mkdir /var/run
        chmod 775 /var/run
        mkdir /var/spool
        chmod 775 /var/spool
        mkdir /var/lock
        chmod 775 /var/lock
        mkdir /var/cache
        chmod 775 /var/cache
        mkdir /var/lib
        chmod 775 /var/lib
        mkdir /var/lib/misc
        chmod 775 /var/lib/misc
        mkdir /var/lib/dbus
        chmod 775 /var/lib/dbus
        mkdir /var/empty
        chmod 600 /var/empty
        mkdir /var/etc
        chmod 775 /var/etc
        mkdir /var/status
	# HMServer measurement
        chmod 775 /var/status
	touch /var/status/SDinitialised
	mkdir -p /usr/local/sdcard/measurement
	mkdir -p /media/sd-mmcblk0
	ln -sf /usr/local/sdcard/measurement /media/sd-mmcblk0/measurement
  for i in $(seq 0 7); do
    mkdir -p /media/usb${i}
  done

  # SSH dir setup (/root/.ssh is linked to /usr/local/etc/ssh)
  mkdir -p /usr/local/etc/ssh

  # create a /usr/local/tmp directory for creating things like backup files, etc.
  # (we need it on-disk or /tmp will be not enough in case of a filled up /usr/local)
  mkdir -p /usr/local/tmp
  rm -rf /usr/local/tmp/*

	# crontab dirs
  if [ ! -d /usr/local/crontabs ] ; then
    mkdir -p /usr/local/crontabs
    chmod 775 /usr/local/crontabs
  fi
  update_crontab
  mkdir -p /var/spool/cron
  chmod 755 /var/spool/cron
  ln -sf /usr/local/crontabs /var/spool/cron/crontabs

	if [ ! -d /usr/local/etc/config ] ; then
                mkdir -p /usr/local/etc/config
        	chmod 775 /usr/local/etc/config
        fi


        if [ ! -e /etc/config/TZ ] ; then
                cp $CFG_TEMPLATE_DIR/TZ /etc/config
        fi

        # update /etc/config/localtime and /etc/config/timezone
        /bin/updateTZ.sh

        # if /etc/config/timezone is set to Europe/Berlin we
        # assume a german keyboard layout
        if [[ $(cat /etc/config/timezone) == "Europe/Berlin" ]]; then
          /sbin/loadkmap </etc/de.kmap
        fi

        if [ ! -e /etc/config/netconfig ] ; then
                cp $CFG_TEMPLATE_DIR/netconfig /etc/config
        fi
        if [ ! -s /etc/config/shadow ] ; then
                cp $CFG_TEMPLATE_DIR/shadow /etc/config
        fi

  # copy the NUT config files in place in
  # case they don't exist yet
  if [ ! -e /etc/config/nut ] ; then
    cp -Rp ${CFG_TEMPLATE_DIR}/nut /etc/config/
  fi

  # copy the SNMP config files in place in
  # case they don't exist yet
  if [ ! -e /etc/config/snmp ] ; then
    cp -Rp ${CFG_TEMPLATE_DIR}/snmp /etc/config/
  fi

	# cal local postinit file
        if [ ! -e /etc/config/safemode ] ; then
		if [ -x /usr/local/etc/rc.postinit ]; then
			/usr/local/etc/rc.postinit
		fi
	fi
 
}

cleanup() {
  save_urandom
}

start() {
	echo -n "eQ-3 System start: "
	init
	echo "OK"
	echo -n "Starting crond: "
	start-stop-daemon -S -q -b -m -p /var/run/crond.pid --exec /usr/sbin/crond -- -f
	echo "OK"
}

stop () {
  echo -n "Stopping crond: "
	start-stop-daemon -K -q -p /var/run/crond.pid
  echo "OK"
  echo -n "eQ-3 System stop: "
  cleanup
  echo "OK"

  # check if we should install an addon
  if [[ -r /usr/local/.doAddonInstall ]]; then
    /bin/install_addon
    rm -f /usr/local/.doAddonInstall
  fi
}

restart() {
	start
}

case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart|reload)
	restart
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?

